{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "nnpops",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "home": "https://github.com/openmm/NNPOps",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "High performance implementations of operations used in Neural Network Potentials"
  },
  "build": {
   "missing_dso_whitelist": [
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*"
   ],
   "number": "1",
   "rpaths": [
    "lib/",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/lib/python3.10/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/lib/python3.9/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/lib/python3.8/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/lib/python3.10/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/lib/python3.8/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/lib/python3.9/site-packages/torch/lib"
   ],
   "string": "cpu_py39h1234567_1"
  },
  "extra": {
   "recipe-maintainers": [
    "raimis",
    "mikemhenry",
    "h-vetinari",
    "raimis",
    "mikemhenry",
    "h-vetinari",
    "raimis",
    "mikemhenry",
    "h-vetinari",
    "raimis",
    "mikemhenry",
    "h-vetinari",
    "raimis",
    "mikemhenry",
    "h-vetinari",
    "raimis",
    "mikemhenry",
    "h-vetinari"
   ]
  },
  "package": {
   "name": "nnpops",
   "version": "0.5"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake"
   ],
   "host": [
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cpu*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cpu*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cpu*",
    "torchani",
    "mdtraj",
    "pytest"
   ],
   "run": [
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani"
   ],
   "run_constrained": [
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cpu*",
    "pytorch =*=cpu*",
    "pytorch =*=cpu*"
   ]
  },
  "source": {
   "sha256": "1e9d5d631c852593e9e07a17db576187e5e8f50e7ab2c1e6a79b3e77dae06048",
   "url": "https://github.com/openmm/NNPOps/archive/refs/tags/v0.5.tar.gz"
  },
  "test": {
   "imports": [
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "sysroot_linux-64"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "torchani"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python",
    "torchani"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "home": "https://github.com/openmm/NNPOps",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "High performance implementations of operations used in Neural Network Potentials"
  },
  "build": {
   "missing_dso_whitelist": [
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*",
    "*/libcuda.*"
   ],
   "number": "1",
   "rpaths": [
    "lib/",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/lib/python3.10/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/lib/python3.9/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/lib/python3.8/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/lib/python3.10/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/lib/python3.8/site-packages/torch/lib",
    "lib/",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/lib/python3.9/site-packages/torch/lib"
   ],
   "string": "cpu_py39h1234567_1"
  },
  "extra": {
   "recipe-maintainers": [
    "raimis",
    "mikemhenry",
    "h-vetinari",
    "raimis",
    "mikemhenry",
    "h-vetinari",
    "raimis",
    "mikemhenry",
    "h-vetinari",
    "raimis",
    "mikemhenry",
    "h-vetinari",
    "raimis",
    "mikemhenry",
    "h-vetinari",
    "raimis",
    "mikemhenry",
    "h-vetinari"
   ]
  },
  "package": {
   "name": "nnpops",
   "version": "0.5"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake",
    "cxx_compiler_stub",
    "sysroot_linux-64  2.17",
    "make",
    "cmake"
   ],
   "host": [
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cuda*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cpu*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cpu*",
    "torchani",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cpu*",
    "torchani",
    "mdtraj",
    "pytest"
   ],
   "run": [
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani",
    "python",
    "torchani"
   ],
   "run_constrained": [
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cuda*",
    "pytorch =*=cpu*",
    "pytorch =*=cpu*",
    "pytorch =*=cpu*"
   ]
  },
  "source": {
   "sha256": "1e9d5d631c852593e9e07a17db576187e5e8f50e7ab2c1e6a79b3e77dae06048",
   "url": "https://github.com/openmm/NNPOps/archive/refs/tags/v0.5.tar.gz"
  },
  "test": {
   "imports": [
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI",
    "NNPOps",
    "NNPOps.OptimizedTorchANI"
   ]
  }
 },
 "name": "nnpops",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "nnpops"
  ]
 },
 "parsing_error": false,
 "platforms": [
  "linux_64"
 ],
 "pr_info": {
  "__lazy_json__": "pr_info/nnpops.json"
 },
 "raw_meta_yaml": "{% set version = \"0.5\" %}\n# see github.com/conda-forge/conda-forge.github.io/issues/1059 for naming discussion\n{% set torch_proc_type = \"cuda\" if cuda_compiler_version != \"None\" else \"cpu\" %}\n\npackage:\n  name: nnpops\n  version: {{ version }}\n\nsource:\n  url: https://github.com/openmm/NNPOps/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: 1e9d5d631c852593e9e07a17db576187e5e8f50e7ab2c1e6a79b3e77dae06048\n\nbuild:\n  skip: true  # [not linux]\n  # as of pytorch 1.13, conda-forge only builds for CUDA 11.2+, see\n  # https://github.com/conda-forge/conda-forge-pinning-feedstock/issues/3491\n  skip: true  # [cuda_compiler_version not in (\"None\", \"11.2\")]\n  number: 1\n  rpaths:\n    - lib/\n    - {{ SP_DIR }}/torch/lib\n  missing_dso_whitelist:\n    - '*/libcuda.*'  # [linux64]\n  string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != \"None\"]\n  string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == \"None\"]\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}  # [cuda_compiler_version != 'None']\n    - sysroot_linux-64  2.17  # [linux64]\n    - make\n    - cmake\n  host:\n    - python\n    - pytorch\n    - pytorch =*={{ torch_proc_type }}*\n    - torchani\n    - mdtraj\n    - pytest\n  run:\n    - python\n    - torchani\n  run_constrained:\n    # additional run constraint to the one from the (version-only) run_export;\n    # constraining the CPU builds to CPU pytorch isn't 100% necessary, but cleaner\n    - pytorch =*={{ torch_proc_type }}*\n\ntest:\n  imports:\n    - NNPOps\n    - NNPOps.OptimizedTorchANI\n\nabout:\n  home: https://github.com/openmm/NNPOps\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: High performance implementations of operations used in Neural Network Potentials\n\nextra:\n  recipe-maintainers:\n    - raimis\n    - mikemhenry\n    - h-vetinari\n",
 "req": {
  "__set__": true,
  "elements": [
   "cmake",
   "cuda_compiler_stub",
   "cxx_compiler_stub",
   "make",
   "mdtraj",
   "pytest",
   "python",
   "pytorch",
   "sysroot_linux-64",
   "torchani"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "sysroot_linux-64"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "torchani"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "python",
    "torchani"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "make",
    "sysroot_linux-64  2.17"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "mdtraj",
    "pytest",
    "python",
    "pytorch",
    "pytorch =*=cpu*",
    "pytorch =*=cuda*",
    "torchani"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python",
    "torchani"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://github.com/openmm/NNPOps/archive/refs/tags/v0.5.tar.gz",
 "version": "0.5",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/nnpops.json"
 }
}