{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "infrared",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "Infrared provides a fast and flexible C++ engine that evaluates a\nconstraint network consisting of variables, multi-ary functions, and\nmulti-ary constraints. Functions and constraints are C++ or Python\nobjects, where new functions and constraints are easily added in C++\nor in Python\n",
   "dev_url": "https://gitlab.inria.fr/amibio/Infrared",
   "doc_url": "https://www.lix.polytechnique.fr/~will/Software/Infrared/Doc/index.html",
   "home": "https://gitlab.inria.fr/amibio/Infrared",
   "license": "GPL-3.0-only",
   "license_family": "GPL",
   "license_file": "COPYING",
   "summary": "A generic C++/Python hybrid library for efficient (fixed-parameter tractable) Boltzmann sampling"
  },
  "build": {
   "number": "0",
   "script": [
    "export CMAKE_GENERATOR=\"Ninja\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv",
    "export CMAKE_GENERATOR=\"Ninja\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv",
    "export CMAKE_GENERATOR=\"Ninja\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv",
    "export CMAKE_GENERATOR=\"Ninja\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv",
    "export CMAKE_GENERATOR=\"Ninja\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv",
    "export CMAKE_GENERATOR=\"Ninja\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will"
   ]
  },
  "package": {
   "name": "infrared",
   "version": "1.1"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja"
   ],
   "host": [
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0"
   ],
   "run": [
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp"
   ]
  },
  "source": {
   "sha256": "034768b2841f93f18ea08e2bf7da5a45550dce40212ec88c251b8e6b8a0a89e1",
   "url": "https://gitlab.inria.fr/amibio/Infrared/-/archive/v1.1/Infrared-v1.1.tar.gz"
  },
  "test": {
   "imports": [
    "infrared",
    "infrared",
    "infrared",
    "infrared",
    "infrared",
    "infrared"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost",
    "pip",
    "pybind11",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "networkx",
    "python",
    "treedecomp"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "Infrared provides a fast and flexible C++ engine that evaluates a\nconstraint network consisting of variables, multi-ary functions, and\nmulti-ary constraints. Functions and constraints are C++ or Python\nobjects, where new functions and constraints are easily added in C++\nor in Python\n",
   "dev_url": "https://gitlab.inria.fr/amibio/Infrared",
   "doc_url": "https://www.lix.polytechnique.fr/~will/Software/Infrared/Doc/index.html",
   "home": "https://gitlab.inria.fr/amibio/Infrared",
   "license": "GPL-3.0-only",
   "license_family": "GPL",
   "license_file": "COPYING",
   "summary": "A generic C++/Python hybrid library for efficient (fixed-parameter tractable) Boltzmann sampling"
  },
  "build": {
   "number": "0",
   "script": [
    "export CMAKE_GENERATOR=\"Ninja\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv",
    "export CMAKE_GENERATOR=\"Ninja\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv",
    "export CMAKE_GENERATOR=\"Ninja\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv",
    "export CMAKE_GENERATOR=\"Ninja\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv",
    "export CMAKE_GENERATOR=\"Ninja\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv",
    "export CMAKE_GENERATOR=\"Ninja\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv",
    "export CMAKE_GENERATOR=\"Ninja\"",
    "export CMAKE_CXX_STANDARD=\"17\"",
    "export CXXFLAGS=\"-std=c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv",
    "export CMAKE_GENERATOR=\"Ninja\"",
    "export CMAKE_CXX_STANDARD=\"17\"",
    "export CXXFLAGS=\"-std=c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv",
    "export CMAKE_GENERATOR=\"Ninja\"",
    "export CMAKE_CXX_STANDARD=\"17\"",
    "export CXXFLAGS=\"-std=c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv",
    "export CMAKE_GENERATOR=\"Ninja\"",
    "export CMAKE_CXX_STANDARD=\"17\"",
    "export CXXFLAGS=\"-std=c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv",
    "export CMAKE_GENERATOR=\"Ninja\"",
    "export CMAKE_CXX_STANDARD=\"17\"",
    "export CXXFLAGS=\"-std=c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv",
    "export CMAKE_GENERATOR=\"Ninja\"",
    "export CMAKE_CXX_STANDARD=\"17\"",
    "export CXXFLAGS=\"-std=c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv",
    "set \"CMAKE_GENERATOR=Ninja\"",
    "set \"CMAKE_GENERATOR_PLATFORM=\"",
    "set \"CMAKE_GENERATOR_TOOLSET=\"",
    "set \"CMAKE_CXX_STANDARD=17\"",
    "set \"CXXFLAGS=/std:c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/python.exe -m pip install . -vvv",
    "set \"CMAKE_GENERATOR=Ninja\"",
    "set \"CMAKE_GENERATOR_PLATFORM=\"",
    "set \"CMAKE_GENERATOR_TOOLSET=\"",
    "set \"CMAKE_CXX_STANDARD=17\"",
    "set \"CXXFLAGS=/std:c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/python.exe -m pip install . -vvv",
    "set \"CMAKE_GENERATOR=Ninja\"",
    "set \"CMAKE_GENERATOR_PLATFORM=\"",
    "set \"CMAKE_GENERATOR_TOOLSET=\"",
    "set \"CMAKE_CXX_STANDARD=17\"",
    "set \"CXXFLAGS=/std:c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/python.exe -m pip install . -vvv",
    "set \"CMAKE_GENERATOR=Ninja\"",
    "set \"CMAKE_GENERATOR_PLATFORM=\"",
    "set \"CMAKE_GENERATOR_TOOLSET=\"",
    "set \"CMAKE_CXX_STANDARD=17\"",
    "set \"CXXFLAGS=/std:c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/python.exe -m pip install . -vvv",
    "set \"CMAKE_GENERATOR=Ninja\"",
    "set \"CMAKE_GENERATOR_PLATFORM=\"",
    "set \"CMAKE_GENERATOR_TOOLSET=\"",
    "set \"CMAKE_CXX_STANDARD=17\"",
    "set \"CXXFLAGS=/std:c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/python.exe -m pip install . -vvv",
    "set \"CMAKE_GENERATOR=Ninja\"",
    "set \"CMAKE_GENERATOR_PLATFORM=\"",
    "set \"CMAKE_GENERATOR_TOOLSET=\"",
    "set \"CMAKE_CXX_STANDARD=17\"",
    "set \"CXXFLAGS=/std:c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/python.exe -m pip install . -vvv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will"
   ]
  },
  "package": {
   "name": "infrared",
   "version": "1.1"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja"
   ],
   "host": [
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0"
   ],
   "run": [
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp"
   ]
  },
  "source": {
   "sha256": "034768b2841f93f18ea08e2bf7da5a45550dce40212ec88c251b8e6b8a0a89e1",
   "url": "https://gitlab.inria.fr/amibio/Infrared/-/archive/v1.1/Infrared-v1.1.tar.gz"
  },
  "test": {
   "imports": [
    "infrared",
    "infrared",
    "infrared",
    "infrared",
    "infrared",
    "infrared",
    "infrared",
    "infrared",
    "infrared",
    "infrared",
    "infrared",
    "infrared",
    "infrared",
    "infrared",
    "infrared",
    "infrared",
    "infrared",
    "infrared"
   ]
  }
 },
 "name": "infrared",
 "osx_64_meta_yaml": {
  "about": {
   "description": "Infrared provides a fast and flexible C++ engine that evaluates a\nconstraint network consisting of variables, multi-ary functions, and\nmulti-ary constraints. Functions and constraints are C++ or Python\nobjects, where new functions and constraints are easily added in C++\nor in Python\n",
   "dev_url": "https://gitlab.inria.fr/amibio/Infrared",
   "doc_url": "https://www.lix.polytechnique.fr/~will/Software/Infrared/Doc/index.html",
   "home": "https://gitlab.inria.fr/amibio/Infrared",
   "license": "GPL-3.0-only",
   "license_family": "GPL",
   "license_file": "COPYING",
   "summary": "A generic C++/Python hybrid library for efficient (fixed-parameter tractable) Boltzmann sampling"
  },
  "build": {
   "number": "0",
   "script": [
    "export CMAKE_GENERATOR=\"Ninja\"",
    "export CMAKE_CXX_STANDARD=\"17\"",
    "export CXXFLAGS=\"-std=c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv",
    "export CMAKE_GENERATOR=\"Ninja\"",
    "export CMAKE_CXX_STANDARD=\"17\"",
    "export CXXFLAGS=\"-std=c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv",
    "export CMAKE_GENERATOR=\"Ninja\"",
    "export CMAKE_CXX_STANDARD=\"17\"",
    "export CXXFLAGS=\"-std=c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv",
    "export CMAKE_GENERATOR=\"Ninja\"",
    "export CMAKE_CXX_STANDARD=\"17\"",
    "export CXXFLAGS=\"-std=c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv",
    "export CMAKE_GENERATOR=\"Ninja\"",
    "export CMAKE_CXX_STANDARD=\"17\"",
    "export CXXFLAGS=\"-std=c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv",
    "export CMAKE_GENERATOR=\"Ninja\"",
    "export CMAKE_CXX_STANDARD=\"17\"",
    "export CXXFLAGS=\"-std=c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . -vvv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will"
   ]
  },
  "package": {
   "name": "infrared",
   "version": "1.1"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja"
   ],
   "host": [
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0"
   ],
   "run": [
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp"
   ]
  },
  "source": {
   "sha256": "034768b2841f93f18ea08e2bf7da5a45550dce40212ec88c251b8e6b8a0a89e1",
   "url": "https://gitlab.inria.fr/amibio/Infrared/-/archive/v1.1/Infrared-v1.1.tar.gz"
  },
  "test": {
   "imports": [
    "infrared",
    "infrared",
    "infrared",
    "infrared",
    "infrared",
    "infrared"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost",
    "pip",
    "pybind11",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "networkx",
    "python",
    "treedecomp"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "infrared"
  ]
 },
 "parsing_error": false,
 "platforms": [
  "win_64",
  "linux_64",
  "osx_64"
 ],
 "pr_info": {
  "__lazy_json__": "pr_info/infrared.json"
 },
 "raw_meta_yaml": "{% set name = \"Infrared\" %}\n{% set version = \"1.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://gitlab.inria.fr/amibio/{{ name }}/-/archive/v{{ version }}/{{ name }}-v{{ version }}.tar.gz\n  sha256: 034768b2841f93f18ea08e2bf7da5a45550dce40212ec88c251b8e6b8a0a89e1\n\nbuild:\n  number: 0\n  script:\n    - export CMAKE_GENERATOR=\"Ninja\"        # [unix]\n    - export CMAKE_CXX_STANDARD=\"17\"        # [osx]\n    - export CXXFLAGS=\"-std=c++17\"          # [osx]\n    - set \"CMAKE_GENERATOR=Ninja\"           # [win]\n    - set \"CMAKE_GENERATOR_PLATFORM=\"       # [win]\n    - set \"CMAKE_GENERATOR_TOOLSET=\"        # [win]\n    - set \"CMAKE_CXX_STANDARD=17\"           # [win]\n    - set \"CXXFLAGS=/std:c++17\"             # [win]\n    - \"{{ PYTHON }} -m pip install . -vvv\"\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - cmake\n    - ninja\n  host:\n    - pybind11\n    - boost\n    - python\n    - pip !=22.1.0\n  run:\n    - python\n    - networkx >=2\n    - treedecomp\n\ntest:\n  imports:\n    - infrared\n\nabout:\n  home: \"https://gitlab.inria.fr/amibio/Infrared\"\n  license: \"GPL-3.0-only\"\n  license_family: GPL\n  license_file: COPYING\n  summary: 'A generic C++/Python hybrid library for efficient (fixed-parameter tractable) Boltzmann sampling'\n  description: |\n    Infrared provides a fast and flexible C++ engine that evaluates a\n    constraint network consisting of variables, multi-ary functions, and\n    multi-ary constraints. Functions and constraints are C++ or Python\n    objects, where new functions and constraints are easily added in C++\n    or in Python\n  doc_url: https://www.lix.polytechnique.fr/~will/Software/Infrared/Doc/index.html\n  dev_url: https://gitlab.inria.fr/amibio/Infrared\n\nextra:\n  recipe-maintainers:\n    - anthonyhtyao\n    - s-will\n",
 "req": {
  "__set__": true,
  "elements": [
   "boost",
   "cmake",
   "cxx_compiler_stub",
   "networkx",
   "ninja",
   "pip",
   "pybind11",
   "python",
   "treedecomp"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost",
    "cxx_compiler_stub",
    "pip",
    "pybind11",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub",
    "networkx",
    "python",
    "treedecomp"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost",
    "pip !=22.1.0",
    "pybind11",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "networkx >=2",
    "python",
    "treedecomp"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://gitlab.inria.fr/amibio/Infrared/-/archive/v1.1/Infrared-v1.1.tar.gz",
 "version": "1.1",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/infrared.json"
 },
 "win_64_meta_yaml": {
  "about": {
   "description": "Infrared provides a fast and flexible C++ engine that evaluates a\nconstraint network consisting of variables, multi-ary functions, and\nmulti-ary constraints. Functions and constraints are C++ or Python\nobjects, where new functions and constraints are easily added in C++\nor in Python\n",
   "dev_url": "https://gitlab.inria.fr/amibio/Infrared",
   "doc_url": "https://www.lix.polytechnique.fr/~will/Software/Infrared/Doc/index.html",
   "home": "https://gitlab.inria.fr/amibio/Infrared",
   "license": "GPL-3.0-only",
   "license_family": "GPL",
   "license_file": "COPYING",
   "summary": "A generic C++/Python hybrid library for efficient (fixed-parameter tractable) Boltzmann sampling"
  },
  "build": {
   "number": "0",
   "script": [
    "set \"CMAKE_GENERATOR=Ninja\"",
    "set \"CMAKE_GENERATOR_PLATFORM=\"",
    "set \"CMAKE_GENERATOR_TOOLSET=\"",
    "set \"CMAKE_CXX_STANDARD=17\"",
    "set \"CXXFLAGS=/std:c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/python.exe -m pip install . -vvv",
    "set \"CMAKE_GENERATOR=Ninja\"",
    "set \"CMAKE_GENERATOR_PLATFORM=\"",
    "set \"CMAKE_GENERATOR_TOOLSET=\"",
    "set \"CMAKE_CXX_STANDARD=17\"",
    "set \"CXXFLAGS=/std:c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/python.exe -m pip install . -vvv",
    "set \"CMAKE_GENERATOR=Ninja\"",
    "set \"CMAKE_GENERATOR_PLATFORM=\"",
    "set \"CMAKE_GENERATOR_TOOLSET=\"",
    "set \"CMAKE_CXX_STANDARD=17\"",
    "set \"CXXFLAGS=/std:c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/python.exe -m pip install . -vvv",
    "set \"CMAKE_GENERATOR=Ninja\"",
    "set \"CMAKE_GENERATOR_PLATFORM=\"",
    "set \"CMAKE_GENERATOR_TOOLSET=\"",
    "set \"CMAKE_CXX_STANDARD=17\"",
    "set \"CXXFLAGS=/std:c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/python.exe -m pip install . -vvv",
    "set \"CMAKE_GENERATOR=Ninja\"",
    "set \"CMAKE_GENERATOR_PLATFORM=\"",
    "set \"CMAKE_GENERATOR_TOOLSET=\"",
    "set \"CMAKE_CXX_STANDARD=17\"",
    "set \"CXXFLAGS=/std:c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/python.exe -m pip install . -vvv",
    "set \"CMAKE_GENERATOR=Ninja\"",
    "set \"CMAKE_GENERATOR_PLATFORM=\"",
    "set \"CMAKE_GENERATOR_TOOLSET=\"",
    "set \"CMAKE_CXX_STANDARD=17\"",
    "set \"CXXFLAGS=/std:c++17\"",
    "/usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/python.exe -m pip install . -vvv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will",
    "anthonyhtyao",
    "s-will"
   ]
  },
  "package": {
   "name": "infrared",
   "version": "1.1"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja"
   ],
   "host": [
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0",
    "pybind11",
    "boost",
    "python",
    "pip !=22.1.0"
   ],
   "run": [
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp",
    "python",
    "networkx >=2",
    "treedecomp"
   ]
  },
  "source": {
   "sha256": "034768b2841f93f18ea08e2bf7da5a45550dce40212ec88c251b8e6b8a0a89e1",
   "url": "https://gitlab.inria.fr/amibio/Infrared/-/archive/v1.1/Infrared-v1.1.tar.gz"
  },
  "test": {
   "imports": [
    "infrared",
    "infrared",
    "infrared",
    "infrared",
    "infrared",
    "infrared"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "boost",
    "pip",
    "pybind11",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "networkx",
    "python",
    "treedecomp"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 }
}